/*
 * Copyright 2012 Krzysztof Otrebski
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id "com.github.maiflai.scalatest" version "0.15"
}

project.ext.set('sharedVersion', "1.4.13-mg")

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
//    apply plugin: 'idea'
    apply plugin: "jacoco"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        testCompile 'org.testng:testng:6.8.8'
        testCompile 'org.mockito:mockito-core:1.9.0'
        testCompile 'org.assertj:assertj-core:3.6.2'
        testCompile 'uk.co.datumedge:hamcrest-json:0.2'
        testCompile 'org.awaitility:awaitility:2.0.0'
        testCompile 'org.assertj:assertj-swing-testng:3.5.0'
    }

    repositories {
        mavenCentral()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url "https://bintray.com/artifact/download/otros-systems/maven"
        }
        maven {
            url "https://dl.bintray.com/cjwizard/CJWizard"
        }
        //https://oss.sonatype.org/content/repositories

    }
}


project(':Common-libs') {

    dependencies {
        compile fileTree(dir: 'lib', include: '*.jar')
        compile 'com.beust:jcommander:1.29'
        compile 'com.google.guava:guava:23.0'
        compile 'com.google.code.gson:gson:2.8.2'
        compile 'com.jcraft:jsch:0.1.+'
        compile 'com.jcraft:jzlib:1.+'
        compile 'com.miglayout:miglayout-swing:4.2'
        compile 'com.fifesoft:rsyntaxtextarea:2.6.1'
        compile 'commons-beanutils:commons-beanutils-bean-collections:1.+'
        compile 'commons-beanutils:commons-beanutils-core:1.+'
        compile 'commons-beanutils:commons-beanutils:1.+'
        compile 'commons-codec:commons-codec:1.+'
        compile 'commons-collections:commons-collections:3.2.1'
        compile 'commons-configuration:commons-configuration:1.+'
        compile 'commons-digester:commons-digester:2.1'
        compile 'commons-httpclient:commons-httpclient:3.1'
        compile 'commons-io:commons-io:2.+'
        compile 'commons-lang:commons-lang:2.+'
        compile 'org.apache.commons:commons-csv:1.4'
        compile 'commons-logging:commons-logging:1.1.1'
        compile 'jcifs:jcifs:1.+'
        compile 'log4j:log4j:1.+'
        compile 'org.apache.commons:commons-compress:1.3'
        compile 'org.apache.commons:commons-vfs2:2.0'
        compile 'org.slf4j:slf4j-api:1.6.6'
        compile 'org.swinglabs.swingx:swingx-all:1.+'
        compile 'org.swinglabs:jxlayer:3.0.4'
        compile 'org.ocpsoft.prettytime:prettytime:3.1.0.Final'
        compile 'org.apache.sling:org.apache.sling.commons.json:2.0.10'
        compile 'ch.qos.logback:logback-core:1.1.3'
        compile 'ch.qos.logback:logback-classic:1.1.3'
        compile 'org.unix4j:unix4j-command:0.3'
        compile "org.scala-lang:scala-library:2.12.4"
        compile "org.scala-lang.modules:scala-parser-combinators_2.12:1.1.0"
        compile "io.dropwizard.metrics:metrics-core:3.2.2"
        compile "com.github.cjwizard:cjwizard:1.0.9"
    }
}

project(':OtrosStarter') {

    sourceCompatibility = 1.6
    targetCompatibility = 1.6
    def today = new Date().format("yyyy-MM-dd")
    jar {
        manifest {
            attributes(
                    'Main-Class': "pl.otros.starter.StartApp",
                    'Build-day': today,
                    'Build-date': new Date(),
                    'SplashScreen-Image': "img/otros/splash.png",
                    'Implementation-Version': sharedVersion,
            )
        }
    }
}

project(':OtrosSwing') {

    dependencies {
        compile project(':Common-libs')
    }
    version = sharedVersion
}

project(':OtrosVfsBrowser') {

   dependencies {
       compile project(':Common-libs')
       compile 'com.intellij:annotations:9.0.4'
   }

}

project(':OtrosLogViewer-api') {
    dependencies {
        compile project(':Common-libs')
    }
    version = sharedVersion
}

project(':OtrosLogViewer-app') {
    def today = new Date().format("yyyy-MM-dd")
    dependencies {
        compile project(':Common-libs')
        compile project(':OtrosSwing')
        compile project(':OtrosVfsBrowser')
        compile project(':OtrosLogViewer-api')
        compile project(':ScalaFormatter')
        compile project(':LoggerConfigParser')
        testCompile 'com.github.tomakehurst:wiremock:1.58'
        testCompile 'org.awaitility:awaitility:2.0.0'
    }
    version = sharedVersion

    jar {

        manifest.mainAttributes(
                'Implementation-Title': 'OtrosLogViewer',
                'Implementation-Version': sharedVersion,
                'Main-Class': "pl.otros.logview.gui.LogViewMainFrame",
                'Build-day': today,
                'Build-date': new Date(),
                'SplashScreen-Image': "img/otros/splash.png"
        )
    }

    test {
        useTestNG()
        maxParallelForks = 2
    }
}

project(':ScalaFormatter'){
    apply plugin: "com.github.maiflai.scalatest"
    apply plugin: 'scala'


    dependencies {
        compile project(':Common-libs')
        compile project(':OtrosLogViewer-api')
        testCompile "org.scalatest:scalatest_2.12:3.0.4"
        testRuntime 'org.pegdown:pegdown:1.1.0'
        testCompile 'junit:junit:4.12'
    }

}

project(':LoggerConfigParser'){
    apply plugin: "com.github.maiflai.scalatest"
    apply plugin: 'scala'

    dependencies {
        compile project(':Common-libs')
        compile project(':OtrosLogViewer-api')
        testCompile "org.scalatest:scalatest_2.12:3.0.4"
        testRuntime 'org.pegdown:pegdown:1.1.0'
        testCompile 'junit:junit:4.12'
    }

}

project(':OtrosAppDist') {
    dependencies {
        compile project(':Common-libs')
        compile project(':OtrosStarter')
        compile project(':OtrosLogViewer-app')
        compile project(':OtrosLogViewer-api')
        compile project(':ScalaFormatter')
    }

    version = sharedVersion

    def classpathList = configurations.runtime.collect { "./lib/" + it.getName() }.join('\n')
    File f = new File(projectDir.toString() + "/classpath.txt")
    f.write(classpathList)


    task dist(type: Zip, dependsOn: ':OtrosLogViewer-app:jar') {
        baseName = "olv"
        def baseDir = { baseName + "-" + version }
        from(f.getAbsolutePath())
        from(project.file('src/dist/otherFiles'))
        from(project.file('src/dist/scriptsWin'))
        from(file("src/dist/scriptsUnix").toString()) { fileMode = 0755 }
        into(baseDir)
        from(project.configurations.runtime) {
            into("lib")
        }
    }
}

project(':ScenarioTests'){
    dependencies {
        compile project(':OtrosLogViewer-app')
    }
    test {
        forkEvery = 1
        maxHeapSize = "300m"
        testLogging.showStandardStreams = true
        useTestNG()
        options.listeners << 'scenario.testng.ScenarioTestListener'
    }
}

def allProcessResouresTasks() {
    println "allProcessResourcesTasks"
    project('OtrosLogViewer-app').sourceSets.processResourcesTaskName.collect { tasks[it] }
}

// This task only for SCM administrator.
// Execute external 'gradle' (of the desired version) and execute this task.
task upgradeWrapper(type: Wrapper) {
    doFirst {
        assert project.hasProperty('newVersion'):
                '''Property 'newVersion' is required for task 'upgradeWrapper'.'''
        assert project.newVersion == gradle.gradleVersion:
                "You invoked Gradle system with version $gradle.gradleVersion instead of desired version $project.newVersion"
    }
}
upgradeWrapper << {
    gradleVersion = project['newVersion']
    println 'WARNING:  Merge our customizations into the newly-generated wrapper scripts'
}
upgradeWrapper.description = 'Upgrade Gradle version.  For SCM Administrators.'
